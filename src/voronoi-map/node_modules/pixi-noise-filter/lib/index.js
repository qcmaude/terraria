/**
 * @author Richard Janicek http://janicek.co @RJanicek
 *
 * Adds a noise texture to your pixi.js displayObjects.
 */


var glsl = "precision mediump float;\r\nvarying vec2 vTextureCoord;\r\nvarying vec4 vColor;\r\nuniform sampler2D uSampler;\r\nuniform vec4 noiseLevelRGBA;\r\n\r\n// The interval is from 0.0 to 1.0\r\nfloat rand(vec2 co) {\r\n      return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main(void) {\r\n      gl_FragColor = texture2D(uSampler, vTextureCoord);\r\n\r\n      float randomDelta = (rand(vTextureCoord) * 2.0) - 1.0;\r\n\r\n      gl_FragColor.r += noiseLevelRGBA.r * randomDelta;\r\n      gl_FragColor.g += noiseLevelRGBA.g * randomDelta;\r\n      gl_FragColor.b += noiseLevelRGBA.b * randomDelta;\r\n      gl_FragColor.a += noiseLevelRGBA.a * randomDelta;\r\n}";
var PIXI = require('pixi.js');

var Filter = function() {
    PIXI.AbstractFilter.call(this);

    this.passes = [this];

    this.uniforms = {
        noiseLevelRGBA: { type: '4fv', value: [0.05, 0.05, 0.05, 0] },
    };

    this.fragmentSrc = [glsl];
};

Filter.prototype = Object.create(PIXI.AbstractFilter.prototype);
Filter.prototype.constructor = Filter;

// How much noise to apply. Array of RGBA floats with values between 0 and 1.
Object.defineProperty(Filter.prototype, 'noiseLevelRGBA', {
    get: function() { return this.uniforms.noiseLevelRGBA.value; },
    set: function(value) { this.uniforms.noiseLevelRGBA.value = value; }
});

module.exports = Filter;
